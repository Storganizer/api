<location>
    <div if={ ! state.edit && state.location }>
      <h2>üè† { state.location.name } <a class="edit-entry" onclick={ toggleEdit }>‚úèÔ∏è</a></h2>

      <p>{ state.location.description }</p>
      <p>Classification: <b>{ state.location.classification }</b></p>
      <qr-code></qr-code>
    </div>
    <div class="clearfix" if={ state.edit && state.location }>
      <location-form location={ state.location } onCancel={ toggleEdit }></location-form>
    </div>
    <boxes-list if={ state.location } boxes={ state.boxes } locationId={ state.location.id } ></boxes-list>

  <script>
    import  './style.css'
    import LocationForm from '../../includes/location/form.riot'
    import QrCode from '../../includes/_helper/qr-code.riot'
    import BoxesList from '../../includes/box/list.riot'


    export default {
      components: {
        LocationForm,
        QrCode,
        BoxesList,
      },

      state: {
        location: false,
        boxes: [],
        showQr: true,
        edit: false,
      },

      toggleEdit() {
        this.update({
          edit: !this.state.edit
        })
      },

      setupListenter() {
        let target = this
        this.registry.eventBus.on('dataLocationLoadSuccess', function(locations) {
          target.loadLocationData()
        })

        this.registry.eventBus.on('dataBoxLoadSuccess', function(locations) {
          target.loadBoxData()
        })
      },

      loadLocationData() {
        this.update({
            location: this.registry.dataStore.locations.getLocationById(this.props.params[0])
        })
      },

      loadBoxData() {
        this.update({
            boxes: this.registry.dataStore.boxes.getBoxesByLocationId(this.props.params[0])
        })
      },

      onMounted() {
        this.setupListenter()
        this.loadLocationData()
        this.loadBoxData()
      }
    }
  </script>

</location>